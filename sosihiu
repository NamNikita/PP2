#include <bits/stdc++.h> 
#include <iostream>
#include <map>
#include <algorithm>
#include <string>
using namespace std; 
   
#define d 256  

int search(string pat, string txt, int q)  
{  
    int cnt = 0;
    int M = pat.length();  
    int N = txt.length(); 
    int i, j;  
    int p = 0; 
    int t = 0; 
    int h = 1;  
  
     
    for (i = 0; i < M - 1; i++)  
        h = (h * d) % q;  
  
   
    for (i = 0; i < M; i++)  
    {  
        p = (d * p + pat[i]) % q;  
        t = (d * t + txt[i]) % q;  
    }  
  
    for (i = 0; i <= N - M; i++)  
    {  
  
        if ( p == t )  
        {  
            for (j = 0; j < M; j++)  
            {  
                if (txt[i+j] != pat[j])  
                    break;  
            }  
  
            if (j == M)  
                cnt++; 
        }  
  
        if ( i < N-M )  
        {  
            t = (d*(t - txt[i]*h) + txt[i+M])%q;  
            if (t < 0)  
            t = (t + q);  
        }  
    }  
    return cnt;
}  
  

int main()  
{  
    int q = 101; 
    map<string, int> m = map<string, int>();
    int n;
    while(true){
    cin >> n;
    if(n == 0) break;
    string strs[n];
    for(int i = 0; i < n; i++){
        string s;
        cin >> s;
        strs[i] = s;
    }
    string txt;
    cin >> txt;
    int max = -1;
    for(int i = 0; i < n; i++){
        m.insert(pair<string, int>(strs[i], search(strs[i], txt, q)));
        if(max < m[strs[i]]) max = m[strs[i]];
    }
    
    map<string, int>::iterator it;
    cout << max << endl;
    for ( it = m.begin(); it != m.end(); it++ )
    {
        if(it->second == max) cout << it->first << endl;
    }
}


    return 0;  
}  
